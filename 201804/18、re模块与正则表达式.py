import re
s1="sef3ff654*&04f@g[pr586sfvbn"

#元字符符号：
#. 点号通配符，匹配任一一个字符。除了换行符之外的所有字符。（包括\t\r缩进符都能找到）
#^ 尖号在方括号外，则是指以后面某个字符开头。
#$ 美元符号为结尾，指以符号前的字符为结尾字符
#* 星号只前方字符出现0到无穷次。由于0次也能匹配上，可能出现什么都匹配不上，但也会返回空字符串
#+ 加号指前方字符出现1到无穷次
#? 问号指前方字符出现0到1次
#{} 大括号。指前方字符出现几次。如{1,5}指出现1到5次，{1，}指出现1到无穷次，{5}出现5次
s2='aaabbbccc'
re.findall('bb*?',s2)   #星号与问号连用，只匹配出bb。星号为贪婪匹配，但0次就匹配成功，而后匹配问号，同样0到1次。
#*号和+号、大括号不能连用

#[] 中括号。出现中括号内任一字符
#[^字符] 中括号内带尖号，则不包含中括号内任一字符
#[a-zA-Z0-9] 大小写字母或数字任一一个字符
#在中括号内，除^、-、\三个符号外，其他符号无特殊意义，就按照普通字符匹配
#[^a-z] 非小写字符的其他字符，但只代表一个字符

#| 竖号代表或。在没有括号对竖杠括起的情况下，竖杠会将两边字符串都当做单独的字符串对待
#竖号如果两面模式存在重复，则返回先匹配出来的字符串。另一个重复的模式匹配结果为空

#反斜杠\
#\d 代表一个数字字符
#\D 代表一个非数字字符
#\s 代表空白字符，如\n\t\f\v等换行制表符
#\S 代表非空白字符
#\w 代表一个字母数字和下滑杠，相当于a-zA-Z0-9]_
#\W 代表一个非字母数字字符
#\b 代表一个字符边界符（特殊字符），如空格，#、@、&等。但\b是解释器的保留字符。使用时需要用\\b或在字符串前加r

#反斜杠可以让特殊字符转化为普通字符

#() 小括号：分组使用，匹配后单独取出括号内内容。括号外匹配到的内容会被忽略。
#如果有多个括号并列，则匹配结果以元组形式组成列表返回
#如果括号内嵌套括号，则同样以元组形式反馈各自匹配的结果
#如果需要去除小括号优先取值，而是作为组别共同使用，则在小括号内加入？：，比如（?:abc)+d ,则会返回所有值


re.findall('pattern',str,re.S)  #以列表形式返回匹配到的所有结果
re.search('pattern',str)  #以特殊对象形式返回第一个找到的结果，需要用对象的group()方法取结果
re.match('pattern',str)  #仅从开始进行匹配
re.split('pattern',str)  #以模式分割字符串。如果用小括号包围分割模式，则保留括号内分割模式的匹配内容。（str.split不保留用于分割的字符）
re.sub('pattern','sub_str',str,3) #替换，用子字符串替换用模式匹配到的所有字符.3代表替换前3次
re.subn('pattern','sub_str',str,2)  #同样替换，但用元组返回新字符串和替换的次数

c=re.compile('pattern')  #编译。将匹配模式提前编译好，然后返回正则对象，然后用正则对象直接调用方法，无需再传入模式
c.findall(str)

re.finditer('pattern',str)  #将匹配到的结果以迭代器形式返回


"::".replace()