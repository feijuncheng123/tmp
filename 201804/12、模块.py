#模块：就是一个py文件：
#1、标准库模块
#2、第三方模块
#3、自定义模块

#模块引入方式：
import pymysql,time   #模块名不能带py后缀.多个模块用逗号隔开
__import__('11、装饰器')  #只能导入顶级模块。导入时原模块中的代码会立即执行。
from functools import reduce  #从模块引入单个变量，变量名引用时，无需添加模块名
from pandas import *  #不建议使用，可能导致引入变量被覆盖
import sys

#导入路径：
#系统路径：sys.path方法
sys.path.append()  #仅临时修改
#1、引入优先级：sys.path返回路径列表，从前到后按顺序查找模块。（优先当前文件夹）

#自定义模块：
#1、当前文件引入当前文件夹：import 测试用；
#2、引入当前文件夹下子文件夹：import 子文件夹名.文件名  或者 from 子文件夹名 import 文件名
#3、

#连环导入：
#1、模块2导入模块1。
#2、模块三又调入模块2.
#模块三执行时：一、模块1、模块2的代码也执行；二、无法在模块3中直接调用模块1的变量。但可以通过模块二.模块一的方式连环调用
#原理：变量命名空间隔离
#模块2通过from 模块1 import 变量的形式：由于变量名直接引入，则可以模块三直接调用

#子文件夹及连环导入：
#如果导入模块时，从子文件夹导入。而子文件夹内的模块之间连环导入
#则：当前文件导入子文件夹模块时会出错，会导致子文件夹内的连环导入失效
#from 路径 import 模块：实质是拷贝模块里的内容到当前文件中
#修改方法：子文件夹内的连环导入添加上层路径，或者，将子文件夹路径添加进环境变量

#模块包内的_init_.py文件：
#如果直接导入路径：则实质为执行路径下的_init_.py文件
#如果需要使用路径下模块。需要在路径下_init_.py文件中通过from . import 模块的方式引入命名空间

if __name__="__main__":
    print(__file__)   #打印当前文件的绝对路径


import importlib
#导入模块使用的库
importlib.import_module("模块.first")  #导入first模块。与__import__不同


